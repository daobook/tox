# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2022, holger krekel and others
# This file is distributed under the same license as the tox package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tox 3.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-31 13:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/index.rst:2
msgid "Welcome to the tox automation project"
msgstr ""

#: ../../docs/index.rst:5
msgid "Vision: standardize testing in Python"
msgstr ""

#: ../../docs/index.rst:7
msgid ""
"``tox`` aims to automate and standardize testing in Python.  It is part "
"of a larger vision of easing the packaging, testing and release process "
"of Python software."
msgstr ""

#: ../../docs/index.rst:12
msgid "What is tox?"
msgstr ""

#: ../../docs/index.rst:14
msgid ""
"tox is a generic virtualenv_ management and test command line tool you "
"can use for:"
msgstr ""

#: ../../docs/index.rst:16
msgid ""
"checking that your package installs correctly with different Python "
"versions and interpreters"
msgstr ""

#: ../../docs/index.rst:19
msgid ""
"running your tests in each of the environments, configuring your test "
"tool of choice"
msgstr ""

#: ../../docs/index.rst:21
msgid ""
"acting as a frontend to Continuous Integration servers, greatly reducing "
"boilerplate and merging CI and shell-based testing."
msgstr ""

#: ../../docs/index.rst:26
msgid "Basic example"
msgstr ""

#: ../../docs/index.rst:28
msgid ""
"First, install ``tox`` with ``pip install tox``. Then put basic "
"information about your project and the test environments you want your "
"project to run in into a ``tox.ini`` file residing right next to your "
"``setup.py`` file:"
msgstr ""

#: ../../docs/index.rst:46
msgid ""
"You can also try generating a ``tox.ini`` file automatically, by running "
"``tox-quickstart`` and then answering a few simple questions."
msgstr ""

#: ../../docs/index.rst:49
msgid ""
"To sdist-package, install and test your project against Python2.7 and "
"Python3.6, just type::"
msgstr ""

#: ../../docs/index.rst:53
msgid ""
"and watch things happen (you must have python2.7 and python3.6 installed "
"in your environment otherwise you will see errors).  When you run ``tox``"
" a second time you'll note that it runs much faster because it keeps "
"track of virtualenv details and will not recreate or re-install "
"dependencies.  You also might want to checkout :doc:`examples` to get "
"some more ideas."
msgstr ""

#: ../../docs/index.rst:60
msgid "System overview"
msgstr ""

#: ../../docs/index.rst:66
msgid "tox workflow diagram"
msgstr ""

#: ../../docs/index.rst:72
msgid "tox roughly follows the following phases:"
msgstr ""

#: ../../docs/index.rst:74
msgid ""
"**configuration:** load ``tox.ini`` and merge it with options from the "
"command line and the operating system environment variables."
msgstr ""

#: ../../docs/index.rst:76
msgid ""
"**packaging** (optional): create a source distribution of the current "
"project by invoking"
msgstr ""

#: ../../docs/index.rst:82
msgid ""
"Note that for this operation the same Python environment will be used as "
"the one tox is installed into (therefore you need to make sure that it "
"contains your build dependencies). Skip this step for application "
"projects that don't have a ``setup.py``."
msgstr ""

#: ../../docs/index.rst:86
msgid "**environment** - for each tox environment (e.g. ``py27``, ``py36``) do:"
msgstr ""

#: ../../docs/index.rst:88
msgid ""
"1. **environment creation**: create a fresh environment, by default "
"virtualenv_ is used. tox will automatically try to discover a valid "
"Python interpreter version by using the environment name (e.g. ``py27`` "
"means Python 2.7 and the ``basepython`` configuration value) and the "
"current operating system ``PATH`` value. This is created at first run "
"only to be re-used at subsequent runs. If certain aspects of the project "
"change, a re-creation of the environment is automatically triggered. To "
"force the recreation tox can be invoked with ``-r``/``--recreate``."
msgstr ""

#: ../../docs/index.rst:95
msgid ""
"2. **install** (optional): install the environment dependencies specified"
" inside the :conf:`deps` configuration section, and then the earlier "
"packaged source distribution. By default ``pip`` is used to install "
"packages, however one can customise this via :conf:`install_command`. "
"Note ``pip`` will not update project dependencies (specified either in "
"the ``install_requires`` or the ``extras`` section of the ``setup.py``) "
"if any version already exists in the virtual environment; therefore we "
"recommend to recreate your environments whenever your project "
"dependencies change."
msgstr ""

#: ../../docs/index.rst:103
msgid ""
"3. **commands**: run the specified commands in the specified order. "
"Whenever the exit code of any of them is not zero stop, and mark the "
"environment failed. Note, starting a command with a single dash character"
" means ignore exit code."
msgstr ""

#: ../../docs/index.rst:107
msgid "**report** print out a report of outcomes for each tox environment:"
msgstr ""

#: ../../docs/index.rst:115
msgid ""
"Only if all environments ran successfully tox will return exit code ``0``"
" (success). In this case you'll also see the message ``congratulations "
":)``."
msgstr ""

#: ../../docs/index.rst:118
msgid ""
"tox will take care of environment isolation for you: it will strip away "
"all operating system environment variables not specified via "
":conf:`passenv`. Furthermore, it will also alter the ``PATH`` variable so"
" that your commands resolve first and foremost within the current active "
"tox environment. In general all executables in the path are available in "
"``commands``, but tox will emit a warning if it was not explicitly "
"allowed via :conf:`allowlist_externals`."
msgstr ""

#: ../../docs/index.rst:125
msgid "Current features"
msgstr ""

#: ../../docs/index.rst:127
msgid "**automation of tedious Python related test activities**"
msgstr ""

#: ../../docs/index.rst:129
msgid ""
"**test your Python package against many interpreter and dependency "
"configs**"
msgstr ""

#: ../../docs/index.rst:131
msgid "automatic customizable (re)creation of virtualenv_ test environments"
msgstr ""

#: ../../docs/index.rst:133
msgid "installs your ``setup.py`` based project into each virtual environment"
msgstr ""

#: ../../docs/index.rst:135
msgid "test-tool agnostic: runs pytest, nose or unittests in a uniform manner"
msgstr ""

#: ../../docs/index.rst:137
msgid ":doc:`plugin system <plugins>` to modify tox execution with simple hooks."
msgstr ""

#: ../../docs/index.rst:139
msgid ""
"uses pip_ and setuptools_ by default.  Support for configuring the "
"installer command through :conf:`install_command = ARGV "
"<install_command>`."
msgstr ""

#: ../../docs/index.rst:142
msgid ""
"**cross-Python compatible**: CPython-2.7, 3.5 and higher, Jython and "
"pypy_."
msgstr ""

#: ../../docs/index.rst:144
msgid "**cross-platform**: Windows and Unix style environments"
msgstr ""

#: ../../docs/index.rst:146
msgid ""
"**integrates with continuous integration servers** like Jenkins_ "
"(formerly known as Hudson) and helps you to avoid boilerplatish and "
"platform-specific build-step hacks."
msgstr ""

#: ../../docs/index.rst:150
msgid ""
"**full interoperability with devpi**: is integrated with and is used for "
"testing in the devpi_ system, a versatile PyPI index server and release "
"managing tool."
msgstr ""

#: ../../docs/index.rst:154
msgid "**driven by a simple ini-style config file**"
msgstr ""

#: ../../docs/index.rst:156
msgid ""
"**documented** :doc:`examples <examples>` and :doc:`configuration "
"<config>`"
msgstr ""

#: ../../docs/index.rst:158
msgid "**concise reporting** about tool invocations and configuration errors"
msgstr ""

#: ../../docs/index.rst:160
msgid "**professionally** :doc:`supported <support>`"
msgstr ""

#: ../../docs/index.rst:162
msgid ""
"supports :ref:`using different / multiple PyPI index servers  "
"<multiindex>`"
msgstr ""

#: ../../docs/index.rst:166
msgid "Related projects"
msgstr ""

#: ../../docs/index.rst:168
msgid ""
"tox has influenced several other projects in the Python test automation "
"space. If tox doesn't quite fit your needs or you want to do more "
"research, we recommend taking a look at these projects:"
msgstr ""

#: ../../docs/index.rst:170
msgid ""
"`Invoke <https://www.pyinvoke.org/>`__ is a general-purpose task "
"execution library, similar to Make. Invoke is far more general-purpose "
"than tox but it does not contain the Python testing-specific features "
"that tox specializes in."
msgstr ""

#: ../../docs/index.rst:171
msgid ""
"`Nox <https://nox.thea.codes>`__ is a project similar in spirit to tox "
"but different in approach. Nox's key difference is that it uses Python "
"scripts instead of a configuration file. Nox might be useful if you find "
"tox's configuration too limiting but aren't looking to move to something "
"as general-purpose as Invoke or Make."
msgstr ""

